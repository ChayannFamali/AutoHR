# Generated by Django 5.2.3 on 2025-06-13 10:23

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("core", "0001_initial"),
        ("resume", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="AIModel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(max_length=100, verbose_name="Название модели"),
                ),
                (
                    "model_type",
                    models.CharField(
                        choices=[
                            ("embedding", "Embedding Model"),
                            ("classification", "Classification Model"),
                            ("scoring", "Scoring Model"),
                        ],
                        max_length=20,
                        verbose_name="Тип модели",
                    ),
                ),
                ("version", models.CharField(max_length=20, verbose_name="Версия")),
                (
                    "is_active",
                    models.BooleanField(default=True, verbose_name="Активна"),
                ),
                ("config", models.JSONField(default=dict, verbose_name="Конфигурация")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name": "AI Модель",
                "verbose_name_plural": "AI Модели",
            },
        ),
        migrations.CreateModel(
            name="AnalysisTask",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "task_type",
                    models.CharField(
                        choices=[
                            ("resume_analysis", "Анализ резюме"),
                            ("job_matching", "Сопоставление с вакансией"),
                            ("bulk_analysis", "Массовый анализ"),
                        ],
                        max_length=30,
                        verbose_name="Тип задачи",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Ожидает"),
                            ("running", "Выполняется"),
                            ("completed", "Завершено"),
                            ("failed", "Ошибка"),
                        ],
                        default="pending",
                        max_length=20,
                        verbose_name="Статус",
                    ),
                ),
                (
                    "result_data",
                    models.JSONField(default=dict, verbose_name="Данные результата"),
                ),
                (
                    "error_message",
                    models.TextField(blank=True, verbose_name="Сообщение об ошибке"),
                ),
                (
                    "processing_time",
                    models.FloatField(
                        blank=True, null=True, verbose_name="Время обработки (сек)"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("started_at", models.DateTimeField(blank=True, null=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                (
                    "application",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.application",
                        verbose_name="Заявка",
                    ),
                ),
                (
                    "job",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.job",
                        verbose_name="Вакансия",
                    ),
                ),
                (
                    "resume",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="resume.resume",
                        verbose_name="Резюме",
                    ),
                ),
            ],
            options={
                "verbose_name": "Задача анализа",
                "verbose_name_plural": "Задачи анализа",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="JobCandidateMatch",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "overall_score",
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                        verbose_name="Общая оценка",
                    ),
                ),
                (
                    "skills_score",
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                        verbose_name="Оценка навыков",
                    ),
                ),
                (
                    "experience_score",
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                        verbose_name="Оценка опыта",
                    ),
                ),
                (
                    "matched_skills",
                    models.JSONField(default=list, verbose_name="Совпадающие навыки"),
                ),
                (
                    "missing_skills",
                    models.JSONField(default=list, verbose_name="Недостающие навыки"),
                ),
                (
                    "experience_analysis",
                    models.JSONField(default=dict, verbose_name="Анализ опыта"),
                ),
                (
                    "recommendation",
                    models.CharField(
                        choices=[
                            ("strong_match", "Сильное соответствие"),
                            ("good_match", "Хорошее соответствие"),
                            ("partial_match", "Частичное соответствие"),
                            ("weak_match", "Слабое соответствие"),
                        ],
                        max_length=20,
                        verbose_name="Рекомендация",
                    ),
                ),
                ("reasoning", models.TextField(verbose_name="Обоснование")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "candidate",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.candidate",
                        verbose_name="Кандидат",
                    ),
                ),
                (
                    "job",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.job",
                        verbose_name="Вакансия",
                    ),
                ),
                (
                    "resume",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="resume.resume",
                        verbose_name="Резюме",
                    ),
                ),
            ],
            options={
                "verbose_name": "Соответствие кандидата вакансии",
                "verbose_name_plural": "Соответствия кандидатов вакансиям",
                "ordering": ["-overall_score"],
                "unique_together": {("job", "candidate", "resume")},
            },
        ),
    ]
